/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  Identity,
  IdentityFromJSON,
  IdentityFromJSONTyped,
  IdentityToJSON,
  TeamViaMembership,
  TeamViaMembershipFromJSON,
  TeamViaMembershipFromJSONTyped,
  TeamViaMembershipToJSON,
} from './'

/**
 *
 * @export
 * @interface CreateCustomer
 */
export interface CreateCustomer {
  /**
   *
   * @type {string}
   * @memberof CreateCustomer
   */
  readonly id: string
  /**
   *
   * @type {Identity}
   * @memberof CreateCustomer
   */
  identity: Identity
  /**
   *
   * @type {string}
   * @memberof CreateCustomer
   */
  sourceId?: string
  /**
   *
   * @type {Array<TeamViaMembership>}
   * @memberof CreateCustomer
   */
  readonly teams: Array<TeamViaMembership>
  /**
   *
   * @type {Date}
   * @memberof CreateCustomer
   */
  readonly createdAt: Date
  /**
   *
   * @type {Date}
   * @memberof CreateCustomer
   */
  readonly updatedAt: Date
}

export function CreateCustomerFromJSON(json: any): CreateCustomer {
  return CreateCustomerFromJSONTyped(json, false)
}

export function CreateCustomerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): CreateCustomer {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: json['id'],
    identity: IdentityFromJSON(json['identity']),
    sourceId: !exists(json, 'source_id') ? undefined : json['source_id'],
    teams: (json['teams'] as Array<any>).map(TeamViaMembershipFromJSON),
    createdAt: new Date(json['created_at']),
    updatedAt: new Date(json['updated_at']),
  }
}

export function CreateCustomerToJSON(value?: CreateCustomer | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    identity: IdentityToJSON(value.identity),
    source_id: value.sourceId,
  }
}
