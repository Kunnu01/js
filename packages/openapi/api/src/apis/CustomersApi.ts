/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ClientSecret,
  ClientSecretFromJSON,
  ClientSecretToJSON,
  CreateCustomer,
  CreateCustomerFromJSON,
  CreateCustomerToJSON,
  CreateCustomerRequest,
  CreateCustomerRequestFromJSON,
  CreateCustomerRequestToJSON,
  Customer,
  CustomerFromJSON,
  CustomerToJSON,
  CustomerConfirmCardRequest,
  CustomerConfirmCardRequestFromJSON,
  CustomerConfirmCardRequestToJSON,
  CustomerIntentRequest,
  CustomerIntentRequestFromJSON,
  CustomerIntentRequestToJSON,
  CustomerRequest,
  CustomerRequestFromJSON,
  CustomerRequestToJSON,
  CustomerTokenResponse,
  CustomerTokenResponseFromJSON,
  CustomerTokenResponseToJSON,
  IDTokenExchangeRequest,
  IDTokenExchangeRequestFromJSON,
  IDTokenExchangeRequestToJSON,
  IssueCustomerTokenRequest,
  IssueCustomerTokenRequestFromJSON,
  IssueCustomerTokenRequestToJSON,
  PaginatedCustomerList,
  PaginatedCustomerListFromJSON,
  PaginatedCustomerListToJSON,
  PatchedCustomerRequest,
  PatchedCustomerRequestFromJSON,
  PatchedCustomerRequestToJSON,
} from '../models'

export interface CustomersV1ConfirmCardCreateRequest {
  customerConfirmCardRequest: CustomerConfirmCardRequest
}

export interface CustomersV1CreateRequest {
  createCustomerRequest: CreateCustomerRequest
}

export interface CustomersV1DestroyRequest {
  id: string
}

export interface CustomersV1ListRequest {
  limit?: number
  offset?: number
  sourceId?: string
}

export interface CustomersV1OidcExchangeCreateRequest {
  iDTokenExchangeRequest: IDTokenExchangeRequest
}

export interface CustomersV1PartialUpdateRequest {
  id: string
  patchedCustomerRequest?: PatchedCustomerRequest
}

export interface CustomersV1PaymentIntentCreateRequest {
  customerIntentRequest: CustomerIntentRequest
}

export interface CustomersV1RetrieveRequest {
  id: string
}

export interface CustomersV1SetupIntentCreateRequest {
  customerIntentRequest: CustomerIntentRequest
}

export interface CustomersV1TokenCreateRequest {
  issueCustomerTokenRequest?: IssueCustomerTokenRequest
}

export interface CustomersV1UpdateRequest {
  id: string
  customerRequest?: CustomerRequest
}

/**
 *
 */
export class CustomersApi extends runtime.BaseAPI {
  /**
   * Confirm card as a preferred payment method.
   */
  async customersV1ConfirmCardCreateRaw(
    requestParameters: CustomersV1ConfirmCardCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.customerConfirmCardRequest === null ||
      requestParameters.customerConfirmCardRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'customerConfirmCardRequest',
        'Required parameter requestParameters.customerConfirmCardRequest was null or undefined when calling customersV1ConfirmCardCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/confirm_card/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CustomerConfirmCardRequestToJSON(
          requestParameters.customerConfirmCardRequest
        ),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Confirm card as a preferred payment method.
   */
  async customersV1ConfirmCardCreate(
    requestParameters: CustomersV1ConfirmCardCreateRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.customersV1ConfirmCardCreateRaw(requestParameters, initOverrides)
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1CreateRaw(
    requestParameters: CustomersV1CreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CreateCustomer>> {
    if (
      requestParameters.createCustomerRequest === null ||
      requestParameters.createCustomerRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createCustomerRequest',
        'Required parameter requestParameters.createCustomerRequest was null or undefined when calling customersV1Create.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateCustomerRequestToJSON(
          requestParameters.createCustomerRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateCustomerFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1Create(
    requestParameters: CustomersV1CreateRequest,
    initOverrides?: RequestInit
  ): Promise<CreateCustomer> {
    const response = await this.customersV1CreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1DestroyRaw(
    requestParameters: CustomersV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling customersV1Destroy.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1Destroy(
    requestParameters: CustomersV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.customersV1DestroyRaw(requestParameters, initOverrides)
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1ListRaw(
    requestParameters: CustomersV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PaginatedCustomerList>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset
    }

    if (requestParameters.sourceId !== undefined) {
      queryParameters['source_id'] = requestParameters.sourceId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedCustomerListFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1List(
    requestParameters: CustomersV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<PaginatedCustomerList> {
    const response = await this.customersV1ListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1OidcExchangeCreateRaw(
    requestParameters: CustomersV1OidcExchangeCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
    if (
      requestParameters.iDTokenExchangeRequest === null ||
      requestParameters.iDTokenExchangeRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'iDTokenExchangeRequest',
        'Required parameter requestParameters.iDTokenExchangeRequest was null or undefined when calling customersV1OidcExchangeCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/oidc-exchange/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IDTokenExchangeRequestToJSON(
          requestParameters.iDTokenExchangeRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerTokenResponseFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1OidcExchangeCreate(
    requestParameters: CustomersV1OidcExchangeCreateRequest,
    initOverrides?: RequestInit
  ): Promise<CustomerTokenResponse> {
    const response = await this.customersV1OidcExchangeCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1PartialUpdateRaw(
    requestParameters: CustomersV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Customer>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling customersV1PartialUpdate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchedCustomerRequestToJSON(
          requestParameters.patchedCustomerRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1PartialUpdate(
    requestParameters: CustomersV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<Customer> {
    const response = await this.customersV1PartialUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a payment intent for a new plan. Validates server-side the right amount to charge client-side.  Returns payment intent client secret to give client ability to collect new card details and charge it.  There are two cases where we would create payment intent for a new plan up front client-side:  1. Brand new Customer/Team during sign-up flow, no previous subscription or plan  1. Team switching from unmetered free plan to paid plan, with no payment method saved
   */
  async customersV1PaymentIntentCreateRaw(
    requestParameters: CustomersV1PaymentIntentCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ClientSecret>> {
    if (
      requestParameters.customerIntentRequest === null ||
      requestParameters.customerIntentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'customerIntentRequest',
        'Required parameter requestParameters.customerIntentRequest was null or undefined when calling customersV1PaymentIntentCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/payment_intent/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CustomerIntentRequestToJSON(
          requestParameters.customerIntentRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ClientSecretFromJSON(jsonValue)
    )
  }

  /**
   * Create a payment intent for a new plan. Validates server-side the right amount to charge client-side.  Returns payment intent client secret to give client ability to collect new card details and charge it.  There are two cases where we would create payment intent for a new plan up front client-side:  1. Brand new Customer/Team during sign-up flow, no previous subscription or plan  1. Team switching from unmetered free plan to paid plan, with no payment method saved
   */
  async customersV1PaymentIntentCreate(
    requestParameters: CustomersV1PaymentIntentCreateRequest,
    initOverrides?: RequestInit
  ): Promise<ClientSecret> {
    const response = await this.customersV1PaymentIntentCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1RenewTokenCreateRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/renew_token/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerTokenResponseFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1RenewTokenCreate(
    initOverrides?: RequestInit
  ): Promise<CustomerTokenResponse> {
    const response = await this.customersV1RenewTokenCreateRaw(initOverrides)
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1RetrieveRaw(
    requestParameters: CustomersV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Customer>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling customersV1Retrieve.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1Retrieve(
    requestParameters: CustomersV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<Customer> {
    const response = await this.customersV1RetrieveRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Sets up future payments and passes back client secret to be used in card form. Similar to payment_intent endpoint except no charge is made.
   */
  async customersV1SetupIntentCreateRaw(
    requestParameters: CustomersV1SetupIntentCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ClientSecret>> {
    if (
      requestParameters.customerIntentRequest === null ||
      requestParameters.customerIntentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'customerIntentRequest',
        'Required parameter requestParameters.customerIntentRequest was null or undefined when calling customersV1SetupIntentCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/setup_intent/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CustomerIntentRequestToJSON(
          requestParameters.customerIntentRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ClientSecretFromJSON(jsonValue)
    )
  }

  /**
   * Sets up future payments and passes back client secret to be used in card form. Similar to payment_intent endpoint except no charge is made.
   */
  async customersV1SetupIntentCreate(
    requestParameters: CustomersV1SetupIntentCreateRequest,
    initOverrides?: RequestInit
  ): Promise<ClientSecret> {
    const response = await this.customersV1SetupIntentCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1TokenCreateRaw(
    requestParameters: CustomersV1TokenCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<CustomerTokenResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/token/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IssueCustomerTokenRequestToJSON(
          requestParameters.issueCustomerTokenRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerTokenResponseFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1TokenCreate(
    requestParameters: CustomersV1TokenCreateRequest,
    initOverrides?: RequestInit
  ): Promise<CustomerTokenResponse> {
    const response = await this.customersV1TokenCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1UpdateRaw(
    requestParameters: CustomersV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Customer>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling customersV1Update.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/customers/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CustomerRequestToJSON(requestParameters.customerRequest),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CustomerFromJSON(jsonValue)
    )
  }

  /**
   * Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers).
   */
  async customersV1Update(
    requestParameters: CustomersV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<Customer> {
    const response = await this.customersV1UpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
