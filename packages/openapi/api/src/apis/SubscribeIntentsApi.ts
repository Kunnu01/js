/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  CreateSubscribeIntentRequest,
  CreateSubscribeIntentRequestFromJSON,
  CreateSubscribeIntentRequestToJSON,
  PaginatedSubscribeIntentList,
  PaginatedSubscribeIntentListFromJSON,
  PaginatedSubscribeIntentListToJSON,
  PatchedSubscribeIntentRequest,
  PatchedSubscribeIntentRequestFromJSON,
  PatchedSubscribeIntentRequestToJSON,
  SubscribeIntent,
  SubscribeIntentFromJSON,
  SubscribeIntentToJSON,
  SubscribeIntentRequest,
  SubscribeIntentRequestFromJSON,
  SubscribeIntentRequestToJSON,
  SubscriptionDetail,
  SubscriptionDetailFromJSON,
  SubscriptionDetailToJSON,
} from '../models'

export interface SubscribeIntentsV1ConfirmCreateRequest {
  id: string
}

export interface SubscribeIntentsV1CreateRequest {
  createSubscribeIntentRequest: CreateSubscribeIntentRequest
}

export interface SubscribeIntentsV1DestroyRequest {
  id: string
}

export interface SubscribeIntentsV1ListRequest {
  limit?: number
  offset?: number
}

export interface SubscribeIntentsV1PartialUpdateRequest {
  id: string
  patchedSubscribeIntentRequest?: PatchedSubscribeIntentRequest
}

export interface SubscribeIntentsV1RetrieveRequest {
  id: string
}

export interface SubscribeIntentsV1UpdateRequest {
  id: string
  subscribeIntentRequest: SubscribeIntentRequest
}

/**
 *
 */
export class SubscribeIntentsApi extends runtime.BaseAPI {
  /**
   * Confirm a subscription intent.  If the intent is still valid, charge the payment method associated with the intent and create or update a team\'s subscription.
   */
  async subscribeIntentsV1ConfirmCreateRaw(
    requestParameters: SubscribeIntentsV1ConfirmCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SubscriptionDetail>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling subscribeIntentsV1ConfirmCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/{id}/confirm/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubscriptionDetailFromJSON(jsonValue)
    )
  }

  /**
   * Confirm a subscription intent.  If the intent is still valid, charge the payment method associated with the intent and create or update a team\'s subscription.
   */
  async subscribeIntentsV1ConfirmCreate(
    requestParameters: SubscribeIntentsV1ConfirmCreateRequest,
    initOverrides?: RequestInit
  ): Promise<SubscriptionDetail> {
    const response = await this.subscribeIntentsV1ConfirmCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async subscribeIntentsV1CreateRaw(
    requestParameters: SubscribeIntentsV1CreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SubscribeIntent>> {
    if (
      requestParameters.createSubscribeIntentRequest === null ||
      requestParameters.createSubscribeIntentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createSubscribeIntentRequest',
        'Required parameter requestParameters.createSubscribeIntentRequest was null or undefined when calling subscribeIntentsV1Create.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateSubscribeIntentRequestToJSON(
          requestParameters.createSubscribeIntentRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubscribeIntentFromJSON(jsonValue)
    )
  }

  /**
   */
  async subscribeIntentsV1Create(
    requestParameters: SubscribeIntentsV1CreateRequest,
    initOverrides?: RequestInit
  ): Promise<SubscribeIntent> {
    const response = await this.subscribeIntentsV1CreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async subscribeIntentsV1DestroyRaw(
    requestParameters: SubscribeIntentsV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling subscribeIntentsV1Destroy.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async subscribeIntentsV1Destroy(
    requestParameters: SubscribeIntentsV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.subscribeIntentsV1DestroyRaw(requestParameters, initOverrides)
  }

  /**
   */
  async subscribeIntentsV1ListRaw(
    requestParameters: SubscribeIntentsV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PaginatedSubscribeIntentList>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedSubscribeIntentListFromJSON(jsonValue)
    )
  }

  /**
   */
  async subscribeIntentsV1List(
    requestParameters: SubscribeIntentsV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<PaginatedSubscribeIntentList> {
    const response = await this.subscribeIntentsV1ListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async subscribeIntentsV1PartialUpdateRaw(
    requestParameters: SubscribeIntentsV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SubscribeIntent>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling subscribeIntentsV1PartialUpdate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchedSubscribeIntentRequestToJSON(
          requestParameters.patchedSubscribeIntentRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubscribeIntentFromJSON(jsonValue)
    )
  }

  /**
   */
  async subscribeIntentsV1PartialUpdate(
    requestParameters: SubscribeIntentsV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<SubscribeIntent> {
    const response = await this.subscribeIntentsV1PartialUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async subscribeIntentsV1RetrieveRaw(
    requestParameters: SubscribeIntentsV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SubscribeIntent>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling subscribeIntentsV1Retrieve.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubscribeIntentFromJSON(jsonValue)
    )
  }

  /**
   */
  async subscribeIntentsV1Retrieve(
    requestParameters: SubscribeIntentsV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<SubscribeIntent> {
    const response = await this.subscribeIntentsV1RetrieveRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async subscribeIntentsV1UpdateRaw(
    requestParameters: SubscribeIntentsV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SubscribeIntent>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling subscribeIntentsV1Update.'
      )
    }

    if (
      requestParameters.subscribeIntentRequest === null ||
      requestParameters.subscribeIntentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'subscribeIntentRequest',
        'Required parameter requestParameters.subscribeIntentRequest was null or undefined when calling subscribeIntentsV1Update.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('auth0-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('customer-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/subscribe_intents/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SubscribeIntentRequestToJSON(
          requestParameters.subscribeIntentRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubscribeIntentFromJSON(jsonValue)
    )
  }

  /**
   */
  async subscribeIntentsV1Update(
    requestParameters: SubscribeIntentsV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<SubscribeIntent> {
    const response = await this.subscribeIntentsV1UpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
