/* tslint:disable */
/* eslint-disable */
/**
 * Iron Plans API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ClientSecret,
  ClientSecretFromJSON,
  ClientSecretToJSON,
  PaginatedStripeCardPaymentMethodList,
  PaginatedStripeCardPaymentMethodListFromJSON,
  PaginatedStripeCardPaymentMethodListToJSON,
  PatchedUpdatePaymentMethodRequest,
  PatchedUpdatePaymentMethodRequestFromJSON,
  PatchedUpdatePaymentMethodRequestToJSON,
  SetupIntentConfirmRequest,
  SetupIntentConfirmRequestFromJSON,
  SetupIntentConfirmRequestToJSON,
  StripeCardPaymentMethod,
  StripeCardPaymentMethodFromJSON,
  StripeCardPaymentMethodToJSON,
  UpdatePaymentMethodRequest,
  UpdatePaymentMethodRequestFromJSON,
  UpdatePaymentMethodRequestToJSON,
} from '../models'

export interface PaymentMethodsV1ConfirmCreateRequest {
  id: string
  setupIntentConfirmRequest: SetupIntentConfirmRequest
}

export interface PaymentMethodsV1DestroyRequest {
  id: string
}

export interface PaymentMethodsV1ListRequest {
  limit?: number
  offset?: number
}

export interface PaymentMethodsV1PartialUpdateRequest {
  id: string
  patchedUpdatePaymentMethodRequest?: PatchedUpdatePaymentMethodRequest
}

export interface PaymentMethodsV1RetrieveRequest {
  id: string
}

export interface PaymentMethodsV1UpdateRequest {
  id: string
  updatePaymentMethodRequest?: UpdatePaymentMethodRequest
}

/**
 *
 */
export class PaymentMethodsApi extends runtime.BaseAPI {
  /**
   * Confirm card for a payment method and set as default if none exist.
   */
  async paymentMethodsV1ConfirmCreateRaw(
    requestParameters: PaymentMethodsV1ConfirmCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling paymentMethodsV1ConfirmCreate.'
      )
    }

    if (
      requestParameters.setupIntentConfirmRequest === null ||
      requestParameters.setupIntentConfirmRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'setupIntentConfirmRequest',
        'Required parameter requestParameters.setupIntentConfirmRequest was null or undefined when calling paymentMethodsV1ConfirmCreate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/{id}/confirm/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SetupIntentConfirmRequestToJSON(
          requestParameters.setupIntentConfirmRequest
        ),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Confirm card for a payment method and set as default if none exist.
   */
  async paymentMethodsV1ConfirmCreate(
    requestParameters: PaymentMethodsV1ConfirmCreateRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.paymentMethodsV1ConfirmCreateRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Creates a setup intent that will eventually be confirmed client-side to create a payment method
   */
  async paymentMethodsV1CreateRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ClientSecret>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ClientSecretFromJSON(jsonValue)
    )
  }

  /**
   * Creates a setup intent that will eventually be confirmed client-side to create a payment method
   */
  async paymentMethodsV1Create(
    initOverrides?: RequestInit
  ): Promise<ClientSecret> {
    const response = await this.paymentMethodsV1CreateRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async paymentMethodsV1DestroyRaw(
    requestParameters: PaymentMethodsV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StripeCardPaymentMethod>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling paymentMethodsV1Destroy.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StripeCardPaymentMethodFromJSON(jsonValue)
    )
  }

  /**
   */
  async paymentMethodsV1Destroy(
    requestParameters: PaymentMethodsV1DestroyRequest,
    initOverrides?: RequestInit
  ): Promise<StripeCardPaymentMethod> {
    const response = await this.paymentMethodsV1DestroyRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async paymentMethodsV1ListRaw(
    requestParameters: PaymentMethodsV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PaginatedStripeCardPaymentMethodList>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedStripeCardPaymentMethodListFromJSON(jsonValue)
    )
  }

  /**
   */
  async paymentMethodsV1List(
    requestParameters: PaymentMethodsV1ListRequest,
    initOverrides?: RequestInit
  ): Promise<PaginatedStripeCardPaymentMethodList> {
    const response = await this.paymentMethodsV1ListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async paymentMethodsV1PartialUpdateRaw(
    requestParameters: PaymentMethodsV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StripeCardPaymentMethod>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling paymentMethodsV1PartialUpdate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchedUpdatePaymentMethodRequestToJSON(
          requestParameters.patchedUpdatePaymentMethodRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StripeCardPaymentMethodFromJSON(jsonValue)
    )
  }

  /**
   */
  async paymentMethodsV1PartialUpdate(
    requestParameters: PaymentMethodsV1PartialUpdateRequest,
    initOverrides?: RequestInit
  ): Promise<StripeCardPaymentMethod> {
    const response = await this.paymentMethodsV1PartialUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async paymentMethodsV1RetrieveRaw(
    requestParameters: PaymentMethodsV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StripeCardPaymentMethod>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling paymentMethodsV1Retrieve.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StripeCardPaymentMethodFromJSON(jsonValue)
    )
  }

  /**
   */
  async paymentMethodsV1Retrieve(
    requestParameters: PaymentMethodsV1RetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<StripeCardPaymentMethod> {
    const response = await this.paymentMethodsV1RetrieveRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async paymentMethodsV1UpdateRaw(
    requestParameters: PaymentMethodsV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StripeCardPaymentMethod>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling paymentMethodsV1Update.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('jwt-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('private-provider-token', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/payment_methods/v1/{id}/`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdatePaymentMethodRequestToJSON(
          requestParameters.updatePaymentMethodRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StripeCardPaymentMethodFromJSON(jsonValue)
    )
  }

  /**
   */
  async paymentMethodsV1Update(
    requestParameters: PaymentMethodsV1UpdateRequest,
    initOverrides?: RequestInit
  ): Promise<StripeCardPaymentMethod> {
    const response = await this.paymentMethodsV1UpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
